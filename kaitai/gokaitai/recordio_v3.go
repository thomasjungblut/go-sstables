// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package gokaitai

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
)


type RecordioV3_Compression int
const (
	RecordioV3_Compression__None RecordioV3_Compression = 0
	RecordioV3_Compression__Snappy RecordioV3_Compression = 1
	RecordioV3_Compression__Gzip RecordioV3_Compression = 2
)
type RecordioV3 struct {
	FileHeader *RecordioV3_FileHeader
	Record []*RecordioV3_Record
	_io *kaitai.Stream
	_root *RecordioV3
	_parent interface{}
}
func NewRecordioV3() *RecordioV3 {
	return &RecordioV3{
	}
}

func (this *RecordioV3) Read(io *kaitai.Stream, parent interface{}, root *RecordioV3) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1 := NewRecordioV3_FileHeader()
	err = tmp1.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.FileHeader = tmp1
	for i := 1;; i++ {
		tmp2, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp2 {
			break
		}
		tmp3 := NewRecordioV3_Record()
		err = tmp3.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Record = append(this.Record, tmp3)
	}
	return err
}

/**
 * recordio header format to figure out the version it was written and whether the records are compressed.
 */
type RecordioV3_FileHeader struct {
	Version uint32
	CompressionType RecordioV3_Compression
	_io *kaitai.Stream
	_root *RecordioV3
	_parent *RecordioV3
}
func NewRecordioV3_FileHeader() *RecordioV3_FileHeader {
	return &RecordioV3_FileHeader{
	}
}

func (this *RecordioV3_FileHeader) Read(io *kaitai.Stream, parent *RecordioV3, root *RecordioV3) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp4, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Version = uint32(tmp4)
	tmp5, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.CompressionType = RecordioV3_Compression(tmp5)
	return err
}

/**
 * The version of the recordio format used in this file.
 */

/**
 * The compression algorithm used. 0 means no compression, 1 means Snappy, 2 means Gzip.
 */

/**
 * recordio record is an "infinite" stream of magic number separated and length encoded byte arrays.
 */
type RecordioV3_Record struct {
	Magic []byte
	RecordNil uint8
	UncompressedPayloadLen *VlqBase128Le
	CompressedPayloadLen *VlqBase128Le
	Payload []byte
	_io *kaitai.Stream
	_root *RecordioV3
	_parent *RecordioV3
	_f_lenPayload bool
	lenPayload int
}
func NewRecordioV3_Record() *RecordioV3_Record {
	return &RecordioV3_Record{
	}
}

func (this *RecordioV3_Record) Read(io *kaitai.Stream, parent *RecordioV3, root *RecordioV3) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp6, err := this._io.ReadBytes(int(3))
	if err != nil {
		return err
	}
	this.Magic = tmp6
	if !(bytes.Equal(this.Magic, []uint8{145, 141, 76})) {
		return kaitai.NewValidationNotEqualError([]uint8{145, 141, 76}, this.Magic, this._io, "/types/record/seq/0")
	}
	tmp7, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.RecordNil = tmp7
	tmp8 := NewVlqBase128Le()
	err = tmp8.Read(this._io, this, nil)
	if err != nil {
		return err
	}
	this.UncompressedPayloadLen = tmp8
	tmp9 := NewVlqBase128Le()
	err = tmp9.Read(this._io, this, nil)
	if err != nil {
		return err
	}
	this.CompressedPayloadLen = tmp9
	tmp10, err := this.LenPayload()
	if err != nil {
		return err
	}
	tmp11, err := this._io.ReadBytes(int(tmp10))
	if err != nil {
		return err
	}
	this.Payload = tmp11
	return err
}

/**
 * The size is either the compressed or uncompressed length.
 */
func (this *RecordioV3_Record) LenPayload() (v int, err error) {
	if (this._f_lenPayload) {
		return this.lenPayload, nil
	}
	tmp12, err := this.UncompressedPayloadLen.Value()
	if err != nil {
		return 0, err
	}
	tmp13, err := this.CompressedPayloadLen.Value()
	if err != nil {
		return 0, err
	}
	this.lenPayload = int((tmp12 ^ tmp13))
	this._f_lenPayload = true
	return this.lenPayload, nil
}

/**
 * 1 means the record is nil, 0 otherwise
 */
