// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package gokaitai

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
)


type RecordioV4_Compression int
const (
	RecordioV4_Compression__None RecordioV4_Compression = 0
	RecordioV4_Compression__Snappy RecordioV4_Compression = 1
	RecordioV4_Compression__Gzip RecordioV4_Compression = 2
)
type RecordioV4 struct {
	FileHeader *RecordioV4_FileHeader
	Record []*RecordioV4_Record
	_io *kaitai.Stream
	_root *RecordioV4
	_parent interface{}
}
func NewRecordioV4() *RecordioV4 {
	return &RecordioV4{
	}
}

func (this *RecordioV4) Read(io *kaitai.Stream, parent interface{}, root *RecordioV4) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1 := NewRecordioV4_FileHeader()
	err = tmp1.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.FileHeader = tmp1
	for i := 1;; i++ {
		tmp2, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp2 {
			break
		}
		tmp3 := NewRecordioV4_Record()
		err = tmp3.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Record = append(this.Record, tmp3)
	}
	return err
}

/**
 * recordio header format to figure out the version it was written and whether the records are compressed.
 */
type RecordioV4_FileHeader struct {
	Version uint32
	CompressionType RecordioV4_Compression
	_io *kaitai.Stream
	_root *RecordioV4
	_parent *RecordioV4
}
func NewRecordioV4_FileHeader() *RecordioV4_FileHeader {
	return &RecordioV4_FileHeader{
	}
}

func (this *RecordioV4_FileHeader) Read(io *kaitai.Stream, parent *RecordioV4, root *RecordioV4) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp4, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Version = uint32(tmp4)
	tmp5, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.CompressionType = RecordioV4_Compression(tmp5)
	return err
}

/**
 * The version of the recordio format used in this file.
 */

/**
 * The compression algorithm used. 0 means no compression, 1 means Snappy, 2 means Gzip.
 */

/**
 * recordio record is an "infinite" stream of magic number separated and length encoded byte arrays.
 */
type RecordioV4_Record struct {
	Magic []byte
	RecordNil uint8
	UncompressedPayloadLen *VlqBase128Le
	CompressedPayloadLen *VlqBase128Le
	Crc32Checksum *VlqBase128Le
	Payload []byte
	_io *kaitai.Stream
	_root *RecordioV4
	_parent *RecordioV4
	_f_lenPayload bool
	lenPayload int
}
func NewRecordioV4_Record() *RecordioV4_Record {
	return &RecordioV4_Record{
	}
}

func (this *RecordioV4_Record) Read(io *kaitai.Stream, parent *RecordioV4, root *RecordioV4) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp6, err := this._io.ReadBytes(int(3))
	if err != nil {
		return err
	}
	this.Magic = tmp6
	if !(bytes.Equal(this.Magic, []uint8{145, 141, 76})) {
		return kaitai.NewValidationNotEqualError([]uint8{145, 141, 76}, this.Magic, this._io, "/types/record/seq/0")
	}
	tmp7, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.RecordNil = tmp7
	tmp8 := NewVlqBase128Le()
	err = tmp8.Read(this._io, this, nil)
	if err != nil {
		return err
	}
	this.UncompressedPayloadLen = tmp8
	tmp9 := NewVlqBase128Le()
	err = tmp9.Read(this._io, this, nil)
	if err != nil {
		return err
	}
	this.CompressedPayloadLen = tmp9
	tmp10 := NewVlqBase128Le()
	err = tmp10.Read(this._io, this, nil)
	if err != nil {
		return err
	}
	this.Crc32Checksum = tmp10
	tmp11, err := this.LenPayload()
	if err != nil {
		return err
	}
	tmp12, err := this._io.ReadBytes(int(tmp11))
	if err != nil {
		return err
	}
	this.Payload = tmp12
	return err
}

/**
 * The size is either the compressed or uncompressed length.
 */
func (this *RecordioV4_Record) LenPayload() (v int, err error) {
	if (this._f_lenPayload) {
		return this.lenPayload, nil
	}
	tmp13, err := this.UncompressedPayloadLen.Value()
	if err != nil {
		return 0, err
	}
	tmp14, err := this.CompressedPayloadLen.Value()
	if err != nil {
		return 0, err
	}
	this.lenPayload = int((tmp13 ^ tmp14))
	this._f_lenPayload = true
	return this.lenPayload, nil
}

/**
 * 1 means the record is nil, 0 otherwise
 */

/**
 * The checksum is a CRC32 (Castagnoli table mapping) built from the previous fields of the record header.
 */
