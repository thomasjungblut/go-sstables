// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package gokaitai

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
)


type RecordioV2_Compression int
const (
	RecordioV2_Compression__None RecordioV2_Compression = 0
	RecordioV2_Compression__Snappy RecordioV2_Compression = 1
	RecordioV2_Compression__Gzip RecordioV2_Compression = 2
)
type RecordioV2 struct {
	FileHeader *RecordioV2_FileHeader
	Record []*RecordioV2_Record
	_io *kaitai.Stream
	_root *RecordioV2
	_parent interface{}
}
func NewRecordioV2() *RecordioV2 {
	return &RecordioV2{
	}
}

func (this *RecordioV2) Read(io *kaitai.Stream, parent interface{}, root *RecordioV2) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1 := NewRecordioV2_FileHeader()
	err = tmp1.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.FileHeader = tmp1
	for i := 1;; i++ {
		tmp2, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp2 {
			break
		}
		tmp3 := NewRecordioV2_Record()
		err = tmp3.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Record = append(this.Record, tmp3)
	}
	return err
}

/**
 * recordio header format to figure out the version it was written and whether the records are compressed.
 */
type RecordioV2_FileHeader struct {
	Version uint32
	CompressionType RecordioV2_Compression
	_io *kaitai.Stream
	_root *RecordioV2
	_parent *RecordioV2
}
func NewRecordioV2_FileHeader() *RecordioV2_FileHeader {
	return &RecordioV2_FileHeader{
	}
}

func (this *RecordioV2_FileHeader) Read(io *kaitai.Stream, parent *RecordioV2, root *RecordioV2) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp4, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Version = uint32(tmp4)
	tmp5, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.CompressionType = RecordioV2_Compression(tmp5)
	return err
}

/**
 * The version of the recordio format used in this file.
 */

/**
 * The compression algorithm used. 0 means no compression, 1 means Snappy, 2 means Gzip.
 */

/**
 * recordio record is an "infinite" stream of magic number separated and length encoded byte arrays.
 */
type RecordioV2_Record struct {
	Magic []byte
	UncompressedPayloadLen *VlqBase128Le
	CompressedPayloadLen *VlqBase128Le
	Payload []byte
	_io *kaitai.Stream
	_root *RecordioV2
	_parent *RecordioV2
	_f_lenPayload bool
	lenPayload int
}
func NewRecordioV2_Record() *RecordioV2_Record {
	return &RecordioV2_Record{
	}
}

func (this *RecordioV2_Record) Read(io *kaitai.Stream, parent *RecordioV2, root *RecordioV2) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp6, err := this._io.ReadBytes(int(3))
	if err != nil {
		return err
	}
	this.Magic = tmp6
	if !(bytes.Equal(this.Magic, []uint8{145, 141, 76})) {
		return kaitai.NewValidationNotEqualError([]uint8{145, 141, 76}, this.Magic, this._io, "/types/record/seq/0")
	}
	tmp7 := NewVlqBase128Le()
	err = tmp7.Read(this._io, this, nil)
	if err != nil {
		return err
	}
	this.UncompressedPayloadLen = tmp7
	tmp8 := NewVlqBase128Le()
	err = tmp8.Read(this._io, this, nil)
	if err != nil {
		return err
	}
	this.CompressedPayloadLen = tmp8
	tmp9, err := this.LenPayload()
	if err != nil {
		return err
	}
	tmp10, err := this._io.ReadBytes(int(tmp9))
	if err != nil {
		return err
	}
	this.Payload = tmp10
	return err
}

/**
 * The size is either the compressed or uncompressed length.
 */
func (this *RecordioV2_Record) LenPayload() (v int, err error) {
	if (this._f_lenPayload) {
		return this.lenPayload, nil
	}
	tmp11, err := this.UncompressedPayloadLen.Value()
	if err != nil {
		return 0, err
	}
	tmp12, err := this.CompressedPayloadLen.Value()
	if err != nil {
		return 0, err
	}
	this.lenPayload = int((tmp11 ^ tmp12))
	this._f_lenPayload = true
	return this.lenPayload, nil
}
