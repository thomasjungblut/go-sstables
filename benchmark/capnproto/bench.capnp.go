// Code generated by capnpc-go. DO NOT EDIT.

package capnproto

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type BytesMsg capnp.Struct

// BytesMsg_TypeID is the unique identifier for the type BytesMsg.
const BytesMsg_TypeID = 0xc40df8c769538d0a

func NewBytesMsg(s *capnp.Segment) (BytesMsg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytesMsg(st), err
}

func NewRootBytesMsg(s *capnp.Segment) (BytesMsg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytesMsg(st), err
}

func ReadRootBytesMsg(msg *capnp.Message) (BytesMsg, error) {
	root, err := msg.Root()
	return BytesMsg(root.Struct()), err
}

func (s BytesMsg) String() string {
	str, _ := text.Marshal(0xc40df8c769538d0a, capnp.Struct(s))
	return str
}

func (s BytesMsg) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytesMsg) DecodeFromPtr(p capnp.Ptr) BytesMsg {
	return BytesMsg(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytesMsg) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytesMsg) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytesMsg) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytesMsg) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytesMsg) Key() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytesMsg) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytesMsg) SetKey(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytesMsg_List is a list of BytesMsg.
type BytesMsg_List = capnp.StructList[BytesMsg]

// NewBytesMsg creates a new list of BytesMsg.
func NewBytesMsg_List(s *capnp.Segment, sz int32) (BytesMsg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytesMsg](l), err
}

// BytesMsg_Future is a wrapper for a BytesMsg promised by a client call.
type BytesMsg_Future struct{ *capnp.Future }

func (f BytesMsg_Future) Struct() (BytesMsg, error) {
	p, err := f.Future.Ptr()
	return BytesMsg(p.Struct()), err
}

const schema_bf8381dfd6a0d017 = "x\xda\x12\x08q`1\xe4\xdd\xcf\xc8\xc0\x14(\xc2\xca" +
	"\xf6\x9f\xab78\xf3\xf8\x0f\xde#\x0c\x82\x0a\x8c\xff\xc5" +
	"/,\xb8v\xbf\xb1y?\x03+#;\x03\x83\xe1Q" +
	"/F\xc1\x9b\xec\x0c\x0c\x82W\xed\x19t\xff'\xa5\xe6" +
	"%g\xe4&\x16\xb1d\xeb''\x16\xe4\x15\x14\xe5\x97" +
	"\xe4\xeb\x83\x05\xf5\xc0|+\xa7\xca\x92\xd4b\xdf\xe2t" +
	"\x06\x86\x00F\xc6@\x16f\x16\x06\x06\x16F\x06\x06A" +
	"^%\x06\x86@\x0ef\xc6@\x11&F\xf6\xec\xd4J" +
	"F^\x06&F^\x06F@\x00\x00\x00\xff\xffxk" +
	"$m"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_bf8381dfd6a0d017,
		Nodes: []uint64{
			0xc40df8c769538d0a,
		},
		Compressed: true,
	})
}
